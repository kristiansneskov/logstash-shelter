input {
   file {
      path => "D:/Dev/git/logstash-tester/dus/sample-dus.log"
	  start_position => "beginning"
      sincedb_path => "./.sincedb"
   }
#  stdin { codec => plain}
  
}
filter {
  grok {
    patterns_dir => "./patterns"
    match => [ "message" , "%{CPTIMESTAMP:timestampraw}%{GREEDYDATA}<%{WORD:event}><toteId><%{WORD:toteId:int}><=%{WORD:element}.%{WORD:element}>%{GREEDYDATA:kvstore}#\s*#",
   "message" , "%{CPTIMESTAMP:timestampraw}.* <%{WORD:event}><%{CPVALUE:element}>%{GREEDYDATA:kvstore}#\s*#", 
   "message" , "%{CPTIMESTAMP:timestampraw}.* <%{WORD:event}><=%{WORD:element}\.%{WORD:element}.+?\[%{GREEDYDATA:details}\]" ]
  }
  if "_grokparsefailure" not in [tags] {
  mutate {
  	gsub => ["kvstore",">"," "]
  }
  kv {
    source  => "kvstore"
    value_split => "<"
    field_split => "<"
    trim => "= "
    trimkey => " "
    allow_duplicate_values => false
  }
  date {
    locale => "en"
    match => ["timestampraw", "yyMMdd' 'HHmmss' 0'SSS"]
    target => "@timestamp"
#    timezone => "Canada/Mountain"
  }
  mutate {
    remove_field => ["kvstore","timestampraw","message"]
  }
  mutate {
    join => { "element" => "."}
  }
  if [event] =~ "TOTEPOSITION" {
    if [itemId] {
      mutate {
        add_field => { "itemTrack" => "%{element}%{itemId}" } 
      }
    }
  }
  if [allocationOpenTime] {
    date {
      match => ["allocationOpenTime", "yyyy-MM-ddHH:mm:ssZ"]
      target => "allocationOpenTime"
    }
  }
  if [allocationCloseTime] {
    date {
      match => ["allocationCloseTime", "yyyy-MM-ddHH:mm:ssZ"]
      target => "allocationCloseTime"
    }
  }
  if [inductionTime] {
    date {
      locale => "en"
      match => ["inductionTime", "yyyy-MM-ddHH:mm:ss.SSSZ"]
      target => "inductionTime"
    }
    ruby {
      code => "event['travelTime'] = (event['@timestamp']-event['inductionTime'])"
    }
    mutate {
      convert => {"travelTime" => "float"}
    }
  }
  if [capacity] {
    mutate {
      convert => { "capacity" => "integer" }
    }
  }
  if [toteCount] {
    mutate {
      convert => {"toteCount" => "integer"}
    }
  }
  if [onRouteCount] {
    mutate {
      convert => {"onRouteCount" => "integer"}
    }
  }
  if [lookahedCount] {
    mutate {
      convert => {"lookahedCount" => "integer"}
    }
  }
  if [criticalLevel] {
    mutate {
      convert => {"criticalLevel" => "integer"}
    }
  }
}
}
output {
  stdout { codec => json}
#  if "_grokparsefailure" in [tags] {
#    file { 
#   	  path => "D:/Dev/logstashwork/calgary/testsetup1/skipped.log"
#    } 
#  } else {
#     elasticsearch {
#     host => localhost
#     index => "t1-yyc-totemovement"
#     document_type => [event]
#     }
#      file {
#        path => "D:/Dev/logstashwork/calgary/testsetup1/output.log"
#      }
#  }
}

